var pc [256]byte
func init() {
	for i := range pc {
				
		pc[i] = 
		pc[i/2] + // i/2番目までのビット数に達している
		 byte(i&1)// 最小位bitが立っているかcheck -> 偶数・奇数の判定に等しい
		// 0 pc[0] = pc[0](0) + byte(0)  -> pc[0] = 0
		// 1 pc[1] = pc[0](0) + byte(1)  -> pc[1] = 1
		// 2 pc[2] = pc[1](1) + byte(0)  -> pc[2] = 1
		// 3 pc[3] = pc[1](1) + byte(1)  -> pc[3] = 2
		// 4 pc[4] = pc[2](1) + byte(0)  -> pc[4] = 1
		// ...
		// 7 pc[8] = pc[3](1) + byte(1)  -> pc[7] = 3
	}
}

		
const int BITS_COUNT_TABLE[256] = {
	
    0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
	// 0 = 00000000(0) 
	// 1 = 00000001(1)
	// 2 = 00000010(1)
	// 3 = 00000011(2)
	// 4 = 00000100(1)
	// ...
	// 15= 00001111(4)
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
    4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8,
};